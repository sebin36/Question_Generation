# -*- coding: utf-8 -*-
"""Model_Training.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S34LFxelltdIbZ_o6qElgaNlE3pRq5EK
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay
import matplotlib.pyplot as plt
import seaborn as sns
import pickle

# Load the dataset
data = pd.read_csv('/content/questions.csv')
contexts = data['context']
questions = data['question']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(contexts, questions, test_size=0.2, random_state=42)

# Feature extraction
vectorizer = TfidfVectorizer()
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Prepare target values (encoding questions as integers)
all_questions = pd.concat([y_train, y_test]).unique()
question_to_label = {q: i for i, q in enumerate(all_questions)}
label_to_question = {i: q for q, i in question_to_label.items()}

y_train_labels = y_train.map(question_to_label)
y_test_labels = y_test.map(question_to_label)

# Define and train the model
model = MLPClassifier(hidden_layer_sizes=(100,), max_iter=500, activation='relu', random_state=42)
model.fit(X_train_tfidf, y_train_labels)

# Predict
y_pred_labels = model.predict(X_test_tfidf)

# Evaluate
accuracy = accuracy_score(y_test_labels, y_pred_labels)
print("Model Accuracy:", accuracy)

# Save the model and the vectorizer
with open('question_generation_model.pkl', 'wb') as f:
    pickle.dump((model, vectorizer, label_to_question), f)

# Confusion Matrix
cm = confusion_matrix(y_test_labels, y_pred_labels, labels=list(label_to_question.keys()))
cm_display = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=label_to_question.values())

plt.figure(figsize=(10, 8))
cm_display.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()

# Additional visualization: Distribution of labels in the test set
plt.figure(figsize=(12, 6))
sns.countplot(x=y_test_labels, palette='viridis')
plt.title('Distribution of Labels in the Test Set')
plt.xlabel('Question Label')
plt.ylabel('Count')
plt.xticks(ticks=range(len(label_to_question)), labels=label_to_question.values(), rotation=90)
plt.show()